from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import dp, main
from config import SUPPORT_LINK
import logging

from handlers.admin.admin import admin_router
from handlers.user.all_categories import all_categories_router
from handlers.user.my_profile import my_profile_router
from handlers.user.Nikita_handlers import nikita_router
from services.user import UserService
from utils.custom_filters import IsUserExistFilter
import kb
import Nikita_text
logging.basicConfig(level=logging.INFO)


@dp.message(Command(commands=["start", "help"]))
async def start(message: types.message):
    all_categories_button = types.KeyboardButton(text='üîç All categories')
    my_profile_button = types.KeyboardButton(text='üéì My profile')
    faq_button = types.KeyboardButton(text='ü§ù FAQ')
    help_button = types.KeyboardButton(text='üöÄ Help')
    keyboard = [[all_categories_button, my_profile_button], [faq_button, help_button]]
    start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, keyboard=keyboard)
    user_telegram_id = message.chat.id
    user_telegram_username = message.from_user.username
    is_exist = await UserService.is_exist(user_telegram_id)
    if is_exist is False:
        await UserService.create(user_telegram_id, user_telegram_username)
    else:
        await UserService.update_receive_messages(user_telegram_id, True)
        await UserService.update_username(user_telegram_id, user_telegram_username)
    #await message.answer('Hi', reply_markup=start_markup)
    await message.answer(Nikita_text.greet.format(name=message.from_user.full_name), reply_markup=kb.start_menu)


@dp.message(F.text == 'ü§ù FAQ', IsUserExistFilter())
async def faq(message: types.message):
    faq_string = """<b>–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤–∞—Å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ü–æ–∫—É–ø–∞—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞!\n
–ü—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n

‚ùóÔ∏è1. –í —Å–ª—É—á–∞–µ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–≥–æ/–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏!  
‚ùóÔ∏è2. –ó–∞–º–µ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
‚ùóÔ∏è3. –ó–∞–º–µ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∏–¥–µ–æ–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
‚ùóÔ∏è4. –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 30 –º–∏–Ω—É—Ç.
‚ùóÔ∏è5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
‚ùóÔ∏è6. –≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
‚ùóÔ∏è7. –î–µ–Ω—å–≥–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–Ω—è—Ç—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."""
    await message.answer(faq_string, parse_mode='html')


@dp.message(F.text == 'üöÄ Help', IsUserExistFilter())
async def support(message: types.message):
    admin_keyboard_builder = InlineKeyboardBuilder()

    admin_keyboard_builder.button(text='Admin', url=SUPPORT_LINK)
    await message.answer(f'<b>Support</b>', reply_markup=admin_keyboard_builder.as_markup())


main_router = Router()
main_router.include_router(admin_router)
main_router.include_router(my_profile_router)
main_router.include_router(all_categories_router)
main_router.include_router(nikita_router)
dp.include_router(main_router)

if __name__ == '__main__':
    main()
