from typing import Union

from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.common.common import add_pagination_buttons
from services.buy import BuyService
from services.buyItem import BuyItemService
from services.category import CategoryService
from services.item import ItemService
from services.subcategory import SubcategoryService
from services.user import UserService
from utils.custom_filters import IsUserExistFilter
from utils.notification_manager import NotificationManager


# –ö–ª–∞—Å—Å AllCategoriesCallback –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏".
# –û–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CallbackData –∏ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å "all_categories".
# –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞:
# - level: —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
# - category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# - subcategory_id: ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# - price: —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
# - quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
# - total_price: –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
# - confirmation: —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# - page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞
class AllCategoriesCallback(CallbackData, prefix="all_categories"):
    level: int
    category_id: int
    subcategory_id: int
    price: float
    quantity: int
    total_price: float
    confirmation: bool
    page: int


# –§—É–Ω–∫—Ü–∏—è create_callback_all_categories —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä AllCategoriesCallback –∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É.
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
# - level: —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
# - category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - subcategory_id: ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - price: —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - total_price: –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - confirmation: —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
# - page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
def create_callback_all_categories(level: int,
                                   category_id: int = -1,
                                   subcategory_id: int = -1,
                                   price: float = 0.0,
                                   total_price: float = 0.0,
                                   quantity: int = 0,
                                   confirmation: bool = False,
                                   page: int = 0):
    return AllCategoriesCallback(level=level, category_id=category_id, subcategory_id=subcategory_id, price=price,
                                 total_price=total_price,
                                 quantity=quantity, confirmation=confirmation, page=page).pack()


# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
all_categories_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "üîç All categories"
@all_categories_router.message(F.text == "üîç All categories", IsUserExistFilter())
async def all_categories_text_message(message: types.message):
    await all_categories(message)


# –§—É–Ω–∫—Ü–∏—è create_category_buttons —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def create_category_buttons(page: int):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = await CategoryService.get_unsold(page)
    if categories:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_builder = InlineKeyboardBuilder()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            category_button_callback = create_callback_all_categories(level=1, category_id=category.id)
            category_button = types.InlineKeyboardButton(text=category.name, callback_data=category_button_callback)
            categories_builder.add(category_button)
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        categories_builder.adjust(2)
        return categories_builder


# –§—É–Ω–∫—Ü–∏—è create_subcategory_buttons —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def create_subcategory_buttons(category_id: int, page: int = 0):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    current_level = 1
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items = await ItemService.get_unsold_subcategories_by_category(category_id, page)
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategories_builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for item in items:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_price = await ItemService.get_price_by_subcategory(item.subcategory_id)
        available_quantity = await ItemService.get_available_quantity(item.subcategory_id)
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_inline_button = create_callback_all_categories(level=current_level + 1,
                                                                   category_id=category_id,
                                                                   subcategory_id=item.subcategory_id,
                                                                   price=subcategory_price)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories_builder.add(
            types.InlineKeyboardButton(
                text=f"{item.subcategory.name}| Price: ${subcategory_price} | Quantity: {available_quantity} pcs",
                callback_data=subcategory_inline_button))
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    subcategories_builder.adjust(1)
    return subcategories_builder


# –§—É–Ω–∫—Ü–∏—è all_categories –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def all_categories(message: Union[Message, CallbackQuery]):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if isinstance(message, Message):
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_inline_buttons = await create_category_buttons(0)
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –Ω—É–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        zero_level_callback = create_callback_all_categories(0)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_inline_buttons:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            category_inline_buttons = await add_pagination_buttons(category_inline_buttons, zero_level_callback,
                                                                   CategoryService.get_maximum_page(),
                                                                   AllCategoriesCallback.unpack, None)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await message.answer('üîç <b>All categories</b>', parse_mode=ParseMode.HTML,
                                 reply_markup=category_inline_buttons.as_markup())
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        else:
            await message.answer('<b>No categories</b>', parse_mode=ParseMode.HTML)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    elif isinstance(message, CallbackQuery):
        callback = message
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
        unpacked_callback = AllCategoriesCallback.unpack(callback.data)
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_inline_buttons = await create_category_buttons(unpacked_callback.page)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_inline_buttons:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            category_inline_buttons = await add_pagination_buttons(category_inline_buttons, callback.data,
                                                                   CategoryService.get_maximum_page(),
                                                                   AllCategoriesCallback.unpack, None)
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await callback.message.edit_text('üîç <b>All categories</b>', parse_mode=ParseMode.HTML,
                                             reply_markup=category_inline_buttons.as_markup())
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        else:
            await callback.message.edit_text('<b>No categories</b>', parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è show_subcategories_in_category –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_subcategories_in_category(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    unpacked_callback = AllCategoriesCallback.unpack(callback.data)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategory_buttons = await create_subcategory_buttons(unpacked_callback.category_id, page=unpacked_callback.page)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    back_button = types.InlineKeyboardButton(text="‚§µÔ∏è Back to all categories",
                                             callback_data=create_callback_all_categories(
                                                 level=unpacked_callback.level - 1))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    subcategory_buttons = await add_pagination_buttons(subcategory_buttons, callback.data,
                                                       ItemService.get_maximum_page(unpacked_callback.category_id),
                                                       AllCategoriesCallback.unpack,
                                                       back_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await callback.message.edit_text("<b>Subcategories:</b>", reply_markup=subcategory_buttons.as_markup(),
                                     parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è select_quantity –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
async def select_quantity(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    unpacked_callback = AllCategoriesCallback.unpack(callback.data)
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    price = unpacked_callback.price
    subcategory_id = unpacked_callback.subcategory_id
    category_id = unpacked_callback.category_id
    current_level = unpacked_callback.level
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    description = await ItemService.get_description(subcategory_id)
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    count_builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç 1 –¥–æ 10
    for i in range(1, 11):
        count_button_callback = create_callback_all_categories(level=current_level + 1, category_id=category_id,
                                                               subcategory_id=subcategory_id, price=price,
                                                               quantity=i, total_price=price * i)
        count_button_inline = types.InlineKeyboardButton(text=str(i), callback_data=count_button_callback)
        count_builder.add(count_button_inline)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = types.InlineKeyboardButton(text="Back",
                                             callback_data=create_callback_all_categories(level=current_level - 1,
                                                                                          category_id=category_id))
    count_builder.add(back_button)
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç—Ä–∏ —Å—Ç–æ–ª–±—Ü–∞
    count_builder.adjust(3)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    subcategory = await SubcategoryService.get_by_primary_key(subcategory_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await callback.message.edit_text(f'<b>You choose:{subcategory.name}\n'
                                     f'Price:${price}\n'
                                     f'Description:{description}\n'
                                     f'Quantity:</b>', reply_markup=count_builder.as_markup(),
                                     parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è buy_confirmation –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
async def buy_confirmation(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    unpacked_callback = AllCategoriesCallback.unpack(callback.data)
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É, –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    price = unpacked_callback.price
    total_price = unpacked_callback.total_price
    subcategory_id = unpacked_callback.subcategory_id
    category_id = unpacked_callback.category_id
    current_level = unpacked_callback.level
    quantity = unpacked_callback.quantity
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    description = await ItemService.get_description(subcategory_id)
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_builder = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    confirm_button_callback = create_callback_all_categories(level=current_level + 1,
                                                             category_id=category_id,
                                                             subcategory_id=subcategory_id,
                                                             price=price,
                                                             total_price=total_price,
                                                             quantity=quantity,
                                                             confirmation=True)
    decline_button_callback = create_callback_all_categories(level=current_level + 1,
                                                             category_id=category_id,
                                                             subcategory_id=subcategory_id,
                                                             price=price,
                                                             total_price=total_price,
                                                             quantity=quantity,
                                                             confirmation=False)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–º–µ–Ω—ã –∏ "–ù–∞–∑–∞–¥"
    confirmation_button = types.InlineKeyboardButton(text="Confirm", callback_data=confirm_button_callback)
    decline_button = types.InlineKeyboardButton(text="Decline", callback_data=decline_button_callback)
    back_button = types.InlineKeyboardButton(text="Back",
                                             callback_data=create_callback_all_categories(level=current_level - 1,
                                                                                          category_id=category_id,
                                                                                          subcategory_id=subcategory_id,
                                                                                          price=price))
    confirmation_builder.add(confirmation_button, decline_button, back_button)
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    confirmation_builder.adjust(2)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    subcategory = await SubcategoryService.get_by_primary_key(subcategory_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏
    await callback.message.edit_text(text=f'<b>You choose:{subcategory.name}\n'
                                          f'Price:${price}\n'
                                          f'Description:{description}\n'
                                          f'Quantity:{quantity}\n'
                                          f'Total price:${total_price}</b>',
                                     reply_markup=confirmation_builder.as_markup(),
                                     parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è buy_processing –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
async def buy_processing(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    unpacked_callback = AllCategoriesCallback.unpack(callback.data)
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    confirmation = unpacked_callback.confirmation
    total_price = unpacked_callback.total_price
    subcategory_id = unpacked_callback.subcategory_id
    quantity = unpacked_callback.quantity
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
    is_in_stock = await ItemService.get_available_quantity(subcategory_id) >= quantity
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
    is_enough_money = await UserService.is_buy_possible(telegram_id, total_price)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    back_to_main_builder = InlineKeyboardBuilder()
    back_to_main_callback = create_callback_all_categories(level=0)
    back_to_main_button = types.InlineKeyboardButton(text="üîç All categories", callback_data=back_to_main_callback)
    back_to_main_builder.add(back_to_main_button)

    # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    if confirmation and is_in_stock and is_enough_money:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await UserService.update_consume_records(telegram_id, total_price)
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        sold_items = await ItemService.get_bought_items(subcategory_id, quantity)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        message = await create_message_with_bought_items(sold_items)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserService.get_by_tgid(telegram_id)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        new_buy_id = await BuyService.insert_new(user, quantity, total_price)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ
        await BuyItemService.insert_many(sold_items, new_buy_id)
        # –ü–æ–º–µ—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
        await ItemService.set_items_sold(sold_items)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∫–µ
        await callback.message.edit_text(text=message, parse_mode=ParseMode.HTML)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ
        await NotificationManager.new_buy(subcategory_id, quantity, total_price, user)
    # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ
    elif confirmation is False:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await callback.message.edit_text(text='<b>Declined!</b>', parse_mode=ParseMode.HTML,
                                         reply_markup=back_to_main_builder.as_markup())
    # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    elif is_enough_money is False:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
        await callback.message.edit_text(text='<b>Insufficient funds!</b>', parse_mode=ParseMode.HTML,
                                         reply_markup=back_to_main_builder.as_markup())
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    elif is_in_stock is False:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
        await callback.message.edit_text(text='<b>Out of stock!</b>', parse_mode=ParseMode.HTML,
                                         reply_markup=back_to_main_builder.as_markup())


# –§—É–Ω–∫—Ü–∏—è create_message_with_bought_items —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
async def create_message_with_bought_items(bought_data: list):
    message = "<b>"
    for count, item in enumerate(bought_data, start=1):
        private_data = item.private_data
        message += f"Item#{count}\nData:<code>{private_data}</code>\n"
    message += "</b>"
    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
@all_categories_router.callback_query(AllCategoriesCallback.filter(), IsUserExistFilter())
async def navigate_categories(call: CallbackQuery, callback_data: AllCategoriesCallback):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    current_level = callback_data.level

    # –°–ª–æ–≤–∞—Ä—å, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Ä–æ–≤–Ω–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    levels = {
        0: all_categories,
        1: show_subcategories_in_category,
        2: select_quantity,
        3: buy_confirmation,
        4: buy_processing
    }

    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
    current_level_function = levels[current_level]

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
    await current_level_function(call)
